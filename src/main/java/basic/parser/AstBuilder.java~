
package basic.parser;

import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.*;

import basic.ast.*;

import java.util.List;
import java.util.ArrayList;

///
public class AstBuilder extends BasicBaseVisitor<Node> {
	// AST֊ի արմատը
	private Program program = null;
	// ընթացիկ վերլուծվող ենթածրագիրը
	private Subroutine current = null;

	
	@Override
	public Node visitProgram(BasicParser.ProgramContext ctx)
	{
		program = new Program();

		for( BasicParser.SubroutineContext sc : ctx.subroutine() )
			program.members.add((Subroutine)visitSubroutine(sc));

		return program;
	}

	@Override
	public Node visitSubroutine(BasicParser.SubroutineContext ctx)
	{
		// ենթածրագիր տրված անունով
		current = new Subroutine(ctx.name.getText());
		
		// պարամետրերը
		for( Token tk : ctx.params ) {
			Variable pr = new Variable(tk.getText());
			current.parameters.add(pr);
		}

		current.locals.addAll(current.parameters);
		
		current.body = (Statement)visitSequence(ctx.sequence());

		/**/System.out.println("-------------");System.out.println(current);
		return current;
	}

	@Override
	public Node visitSequence(BasicParser.SequenceContext ctx)
	{
		Sequence sequ = new Sequence();
		for( BasicParser.StatementContext sc : ctx.statement() )
			sequ.items.add((Statement)visit(sc));
		
		return sequ;
	}

	@Override
	public Node visitStatLet(BasicParser.StatLetContext ctx)
	{
		return new Let(searchVariable(ctx.IDENT().getText()),
					   (Expression)visit(ctx.expression()));
	}

	@Override
	public Node visitStatInput(BasicParser.StatInputContext ctx)
	{
		String prompt = "? ";
		if( ctx.TEXT() != null )
			prompt = ctx.TEXT().getText() + " ";
		return new Input(prompt, searchVariable(ctx.IDENT().getText()));
	}

	@Override
	public Node visitStatPrint(BasicParser.StatPrintContext ctx)
	{
		return new Print((Expression)visit(ctx.expression()));
	}

	@Override
	public Node visitStatIf(BasicParser.StatIfContext ctx)
	{
		Expression cn = (Expression)visit(ctx.mcond);
		Statement de = (Statement)visitSequence(ctx.mseq);
		If sif = new If(cn, de, null);
		
		If si = sif;
		for( int i = 1; i < ctx.scond.size(); ++i ) {
			cn = (Expression)visit(ctx.scond.get(i));
			de = (Statement)visitSequence(ctx.sseq.get(i));
			si.alternative = new If(cn, de, null);
			si = (If)si.alternative;
		}

		if( ctx.aseq != null )
			si.alternative = (Statement)visitSequence(ctx.aseq);
		
		return sif;
	}

	@Override
	public Node visitStatWhile(BasicParser.StatWhileContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitStatFor(BasicParser.StatForContext ctx)
	{
		Variable p = searchVariable(ctx.IDENT().getText());
		Expression f = (Expression)visit(ctx.from);
		Expression t = (Expression)visit(ctx.to);
		double sv = 1.0;
		if( ctx.step != null )
			sv = Double.parseDouble(ctx.step.getText());
		Real s = new Real(sv);
		Statement b = (Statement)visitSequence(ctx.sequence());
		return new For(p, f, t, s, b);
	}

	@Override
	public Node visitStatCall(BasicParser.StatCallContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitApply(BasicParser.ApplyContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitComparison(BasicParser.ComparisonContext ctx)
	{
		return new Binary(ctx.oper.getText(),
						  (Expression)visit(ctx.left),
						  (Expression)visit(ctx.right));
	}

	@Override
	public Node visitDisjunction(BasicParser.DisjunctionContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitUnary(BasicParser.UnaryContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitPriority(BasicParser.PriorityContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitConjunction(BasicParser.ConjunctionContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitPower(BasicParser.PowerContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitMultiply(BasicParser.MultiplyContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitEquality(BasicParser.EqualityContext ctx)
	{ return visitChildren(ctx); }

	@Override
	public Node visitAddition(BasicParser.AdditionContext ctx)
	{
		return new Binary(ctx.oper.getText(),
						  (Expression)visit(ctx.left),
						  (Expression)visit(ctx.right));
	}

	@Override
	public Node visitVariable(BasicParser.VariableContext ctx)
	{
		String vnm = ctx.IDENT().getText();
		// TODO: search for defined variable
		return new Variable(vnm);
	}

	@Override
	public Node visitText(BasicParser.TextContext ctx)
	{
		String lex = ctx.TEXT().getText();
		// TODO: remove quotes
		return new Text(lex);
	}

	@Override
	public Node visitReal(BasicParser.RealContext ctx)
	{
		String lex = ctx.REAL().getText();
		double nval = Double.parseDouble(lex);
		return new Real(nval);
	}


	///
	private Variable searchVariable( String vnm )
	{
		for( Variable vi : current.locals )
			if( vi.name.equals(vnm) )
				return vi;

		Variable vr = new Variable(vnm);
		current.locals.add(vr);
		
		return vr;
	}
}

